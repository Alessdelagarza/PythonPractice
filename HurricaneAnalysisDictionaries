# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

def convert_values(damages, conversion):
  updated_damage = []
  for damage in damages:
    if damage == "Damages not recorded":
      updated_damage.append(damage)
    elif "M" in damage:
      damage = float(damage.strip('M')) * conversion['M']
      updated_damage.append(damage)
    else:
      damage = float(damage.strip('B')) * conversion['B']
      updated_damage.append(damage)
  return updated_damage 

# test function by updating damages
damages = convert_values(damages, conversion)
#print("TEST: " + str(damages[0]))
# 2 
# Create a Table
def hurricane_dictionary(names,months,years,max_sustained_winds,areas_affected,damages,deaths):
  hurricane_data = {}
  index = 0
  for name in names:
    hurricane_data[name] = {"Name": names[index], "Month": months[index], "Year": years[index], "Max Sustained Wind": max_sustained_winds[index], "Areas Affected": areas_affected[index], "Damages": damages[index], "Deaths" : deaths[index] }
    index += 1
  return hurricane_data

# Create and view the hurricanes dictionary
#print(hurricane_dictionary(names,months,years,max_sustained_winds,areas_affected,damages,deaths))
hurricanes = hurricane_dictionary(names,months,years,max_sustained_winds,areas_affected,damages,deaths)
# 3
# Organizing by Year

# create a new dictionary of hurricanes with year and key
def organized_year(hurricanes):
  organized_canes = {}
  current_cane = []
  for name in hurricanes:
    current_year = hurricanes[name]["Year"]
    current_cane = hurricanes[name]

    if current_year in organized_canes.keys():
      for item in organized_canes[current_year]:
        current_list = [organized_canes[current_year]]
        current_list.append([hurricanes[name]])
      organized_canes.update({current_year : current_list})
    else:
      organized_canes.update({current_year : current_cane})

  return organized_canes
#print(organized_year(hurricanes))
# 4
# Counting Damaged Areas
def num_of_hits(hurricanes):
  location_hits = {}
  hits = []
  for name in hurricanes:
    for location in hurricanes[name]["Areas Affected"]:
      areas = location
      if areas in location_hits.keys():
        current_hits = int(location_hits[location]) + 1
        location_hits.update({location : current_hits})
      else:
        location_hits.update({location : 1})
  return location_hits

# create dictionary of areas to store the number of hurricanes involved in
area_hits = num_of_hits(hurricanes)

# 5 
# Calculating Maximum Hurricane Count
def max_hits(area_hits):
  hits = []
  places = []
  count = 0
  for area in area_hits:
    places.append(area)
    hits.append(area_hits[area])
  max_value = max(hits)
  max_index = hits.index(max_value)
  max_place = places[max_index]
  return max_place, max_value
  print(hits)
# find most frequently affected area and the number of hurricanes involved in
[location, total_hits] = max_hits(area_hits)
#print(str(location) + " is the most hit with a grand total of " + str(total_hits) + " hits!")

# 6
# Calculating the Deadliest Hurricane
def deadly_canes(hurricanes):
  death_total = []
  hurricanes_names = []
  for names in hurricanes:
    hurricanes_names.append(names)
    death_total.append(hurricanes[names]["Deaths"])
  max_deaths = max(death_total)
  max_index = death_total.index(max_deaths)
  max_hurricane = hurricanes_names[max_index]
  return max_hurricane, max_deaths
# find highest mortality hurricane and the number of deaths
[cane_name, total_dead] = deadly_canes(hurricanes)
#print(str(cane_name) + " is the deadliest hurricane with a total of " + str(total_dead) + " deaths")

# 7
# Rating Hurricanes by Mortality
def hurricane_mortality_rating(hurricanes):
  rating = []
  cane_name = []
  index = 0
  for names in hurricanes:
    cane_name.append(names)
    num_dead = hurricanes[names]["Deaths"]
    if num_dead <= 0:
      rating.append(0)
    elif num_dead <= 100:
      rating.append(1)
    elif num_dead <= 500:
      rating.append(2)
    elif num_dead <= 1000:
      rating.append(3)
    elif num_dead <= 10000:
      rating.append(4)
    zip_data = zip(cane_name, rating)
    mortality_scale_rating = {key:value for key, value in zip_data}
  return mortality_scale_rating
  
# categorize hurricanes in new dictionary with mortality severity as key
#print(hurricane_mortality_rating(hurricanes))

# 8 Calculating Hurricane Maximum Damage

# find highest damage inducing hurricane and its total cost
def highest_damage(hurricanes):
  hurricane_name = []
  total_damage = []
  for names in hurricanes:
    hurricane_name.append(names)
    if hurricanes[names]["Damages"] == "Damages not recorded":
      total_damage.append(0)
    else: 
      total_damage.append(hurricanes[names]["Damages"])
  max_damage = max(total_damage)
  max_index = total_damage.index(max_damage)
  max_name = hurricane_name[max_index]
  zipped_data = zip(hurricane_name, total_damage)
  hurricane_damage = {key:value for key, value in zipped_data}

  return max_name, max_damage, hurricane_damage

[name, damage, hurricane_damage] = highest_damage(hurricanes)
#print("Hurricane " + str(name) + " had the highest damage resulting in a total loss of $" + str(damage) +"!")

# 9
# Rating Hurricanes by Damage
def hurricane_damage_rating(hurricane_damage):
  damage = []
  cane_name = []
  index = 0
  for names in hurricane_damage:
    cane_name.append(names)
    cost = hurricane_damage[names]
    if cost <= 0:
      damage.append(0)
    elif cost <= 100000000:
      damage.append(1)
    elif cost <= 1000000000:
      damage.append(2)
    elif cost <= 10000000000:
      damage.append(3)
    elif cost <= 50000000000:
      damage.append(4)
  zipped_data = zip(cane_name, damage)
  damage_scale = {key:value for key, value in zipped_data}
  return(damage_scale)

# categorize hurricanes in new dictionary with damage severity as key
#print(hurricane_damage_rating(hurricane_damage))
